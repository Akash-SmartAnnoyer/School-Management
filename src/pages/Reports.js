import React, { useState, useEffect } from 'react';
import { Table, Button, Space, Tag, Modal, Form, Input, Select, DatePicker, Card, message, Row, Col, Statistic } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, DownloadOutlined } from '@ant-design/icons';
import { generateReport, getReport, updateReport, deleteReport, subscribeToCollection, getStudents, getClasses, getTeachers } from '../firebase/services';

const { Option } = Select;
const { RangePicker } = DatePicker;

const Reports = () => {
  const [reports, setReports] = useState([]);
  const [students, setStudents] = useState([]);
  const [classes, setClasses] = useState([]);
  const [teachers, setTeachers] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();
  const [editingReport, setEditingReport] = useState(null);
  const [dateRange, setDateRange] = useState(null);

  useEffect(() => {
    const unsubscribeReports = subscribeToCollection('reports', (data) => {
      setReports(data);
    });
    const unsubscribeStudents = subscribeToCollection('students', (data) => {
      setStudents(data);
    });
    const unsubscribeClasses = subscribeToCollection('classes', (data) => {
      setClasses(data);
    });
    const unsubscribeTeachers = subscribeToCollection('teachers', (data) => {
      setTeachers(data);
    });
    return () => {
      unsubscribeReports();
      unsubscribeStudents();
      unsubscribeClasses();
      unsubscribeTeachers();
    };
  }, []);

  const handleAdd = () => {
    setEditingReport(null);
    form.resetFields();
    setIsModalVisible(true);
  };

  const handleEdit = (record) => {
    setEditingReport(record);
    form.setFieldsValue(record);
    setIsModalVisible(true);
  };

  const handleDelete = async (reportId) => {
    try {
      await deleteReport(reportId);
      message.success('Report deleted successfully');
    } catch (error) {
      message.error('Error deleting report');
    }
  };

  const handleModalOk = async () => {
    try {
      const values = await form.validateFields();
      const reportData = {
        ...values,
        createdAt: new Date().toISOString()
      };

      if (editingReport) {
        await updateReport(editingReport.id, reportData);
        message.success('Report updated successfully');
      } else {
        await generateReport(reportData);
        message.success('Report generated successfully');
      }
      setIsModalVisible(false);
      form.resetFields();
    } catch (error) {
      message.error('Error generating report');
    }
  };

  const handleDownload = async (reportId) => {
    try {
      const report = await getReport(reportId);
      if (report) {
        // Implement download functionality
        message.success('Report downloaded successfully');
      }
    } catch (error) {
      message.error('Error downloading report');
    }
  };

  const columns = [
    {
      title: 'Report Name',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: 'Type',
      dataIndex: 'type',
      key: 'type',
      render: (type) => (
        <Tag color={
          type === 'Academic' ? 'blue' :
          type === 'Attendance' ? 'green' :
          type === 'Financial' ? 'orange' :
          'purple'
        }>
          {type}
        </Tag>
      ),
    },
    {
      title: 'Date Range',
      dataIndex: 'dateRange',
      key: 'dateRange',
      render: (dateRange) => {
        if (!dateRange) return 'N/A';
        return `${new Date(dateRange.start).toLocaleDateString()} - ${new Date(dateRange.end).toLocaleDateString()}`;
      }
    },
    {
      title: 'Generated By',
      dataIndex: 'generatedBy',
      key: 'generatedBy',
    },
    {
      title: 'Date',
      dataIndex: 'createdAt',
      key: 'createdAt',
      render: (date) => new Date(date).toLocaleString(),
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button icon={<DownloadOutlined />} onClick={() => handleDownload(record.id)} />
          <Button icon={<EditOutlined />} onClick={() => handleEdit(record)} />
          <Button icon={<DeleteOutlined />} danger onClick={() => handleDelete(record.id)} />
        </Space>
      ),
    },
  ];

  return (
    <div>
      <Row gutter={16} style={{ marginBottom: 24 }}>
        <Col span={8}>
          <Card>
            <Statistic
              title="Total Reports"
              value={reports.length}
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card>
            <Statistic
              title="Academic Reports"
              value={reports.filter(r => r.type === 'Academic').length}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card>
            <Statistic
              title="Financial Reports"
              value={reports.filter(r => r.type === 'Financial').length}
              valueStyle={{ color: '#faad14' }}
            />
          </Card>
        </Col>
      </Row>

      <Card
        title="Reports Management"
        extra={
          <Button type="primary" icon={<PlusOutlined />} onClick={handleAdd}>
            Generate Report
          </Button>
        }
      >
        <Table columns={columns} dataSource={reports} rowKey="id" />
      </Card>

      <Modal
        title={editingReport ? 'Edit Report' : 'Generate Report'}
        open={isModalVisible}
        onOk={handleModalOk}
        onCancel={() => setIsModalVisible(false)}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="name"
            label="Report Name"
            rules={[{ required: true, message: 'Please input report name!' }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="type"
            label="Report Type"
            rules={[{ required: true, message: 'Please select report type!' }]}
          >
            <Select>
              <Option value="Academic">Academic Report</Option>
              <Option value="Attendance">Attendance Report</Option>
              <Option value="Financial">Financial Report</Option>
              <Option value="Performance">Performance Report</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="dateRange"
            label="Date Range"
            rules={[{ required: true, message: 'Please select date range!' }]}
          >
            <RangePicker style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item
            name="parameters"
            label="Report Parameters"
            rules={[{ required: true, message: 'Please select parameters!' }]}
          >
            <Select mode="multiple" placeholder="Select parameters">
              <Option value="students">Students</Option>
              <Option value="classes">Classes</Option>
              <Option value="teachers">Teachers</Option>
              <Option value="attendance">Attendance</Option>
              <Option value="grades">Grades</Option>
              <Option value="finance">Finance</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="format"
            label="Report Format"
            rules={[{ required: true, message: 'Please select format!' }]}
          >
            <Select>
              <Option value="pdf">PDF</Option>
              <Option value="excel">Excel</Option>
              <Option value="csv">CSV</Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default Reports; 